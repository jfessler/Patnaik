lm.beta(fit2)
fit2 <- lm(tumor_expression$CFH ~ prdx_expression$CFH + TCGA_pca$x[,1] + TCGA_pca$x[,2] + TCGA_pca$x[,3])
fit3 <- lm(tumor_expression$CFH ~ prdx_expression$CFH + TCGA_pca$x[,1] + TCGA_pca$x[,2] + TCGA_pca$x[,3])
lm.beta(fit3)
summary(fit3)$coef
summary(fit3)$coef[2,3]
summary(fit3)$coef[2,1]
fit3$model[2]
head(fit3$model[2])
head(fit3$model[1])
c(1:150)
##comment out for tumor or normal
prdx_expression <- prdx_tumor[,-(1:2)]
#prdx_expression <- prdx_normal[,-(1:2)]
tumor_expression <- tumor_samples[,-(1:2)]
#tumor_expression <- normal_samples[,-(1:2)]
## Remove columns where std dev == 0
prdx_expression <- prdx_expression[, sapply(prdx_expression,function(x) { sd(x) != 0} )]
tumor_expression <- tumor_expression[, sapply(tumor_expression, function(x) { sd(x) != 0} )]
genes_in_prdx <- colnames(prdx_expression)
genes_in_RNAseq <- colnames(tumor_expression)
TCGA_pca <- prcomp(tumor_expression, center = TRUE, scale. = TRUE)
lm.beta <- function (MOD) {
b <- summary(MOD)$coef[2, 1]
sx <- sd(as.matrix(MOD$model[2]))
sy <- sd(as.matrix(MOD$model[1]))
beta <- b * sx/sy
return(beta)
}
all_pc_list <- list()
for (i in c(1:150)){
assign(paste0("PC",i), TCGA_pca$x[,i])
all_pc_list <- c(all_pc_list, paste0("PC",i))
}
lm_fits <- data.frame()
## First time no PCs
for (gene in genes_in_prdx){
if (gene %in% genes_in_RNAseq){
fit <- lm(as.formula(paste0("tumor_expression[[gene]] ~ prdx_expression[[gene]] + ",all_pc_list)))
beta <- lm.beta(fit)
pvalue <- summary(fit)$coefficients[2,4]
Rsquared <- summary(fit)$r.squared
lm_fits <- rbind(lm_fits, data.frame(gene, beta, Rsquared, pvalue))
}
}
adj_pvalue <- p.adjust(lm_fits$pvalue, method = "BH")
lm_fits <- cbind(lm_fits, adj_pvalue)
write.table(lm_fits, file = "BRCA_Tumor_linearModel_150PC_03142016.txt", col.names = TRUE, row.names = FALSE, quote = FALSE)
beep(3)
estimate <- coef(summary(fit3))
estimate
coef(summary(fit3))
coef(summary(fit3))[2,1]
library(beepr)
lm_fits <- data.frame()
## First time no PCs
for (gene in genes_in_prdx){
if (gene %in% genes_in_RNAseq){
fit <- lm(as.formula(paste0("tumor_expression[[gene]] ~ prdx_expression[[gene]] + ",all_pc_list)))
estimate <- coef(summary(fit))[2,1]
pvalue <- summary(fit)$coefficients[2,4]
Rsquared <- summary(fit)$r.squared
lm_fits <- rbind(lm_fits, data.frame(gene, estimate, Rsquared, pvalue))
}
}
adj_pvalue <- p.adjust(lm_fits$pvalue, method = "BH")
lm_fits <- cbind(lm_fits, adj_pvalue)
write.table(lm_fits, file = "BRCA_Tumor_linearModel_150PC_03142016.txt", col.names = TRUE, row.names = FALSE, quote = FALSE)
beep(3)
##comment out for tumor or normal
#prdx_expression <- prdx_tumor[,-(1:2)]
prdx_expression <- prdx_normal[,-(1:2)]
#tumor_expression <- tumor_samples[,-(1:2)]
tumor_expression <- normal_samples[,-(1:2)]
## Remove columns where std dev == 0
prdx_expression <- prdx_expression[, sapply(prdx_expression,function(x) { sd(x) != 0} )]
tumor_expression <- tumor_expression[, sapply(tumor_expression, function(x) { sd(x) != 0} )]
genes_in_prdx <- colnames(prdx_expression)
genes_in_RNAseq <- colnames(tumor_expression)
TCGA_pca <- prcomp(tumor_expression, center = TRUE, scale. = TRUE)
all_pc_list <- list()
for (i in c(1:8)){
assign(paste0("PC",i), TCGA_pca$x[,i])
all_pc_list <- c(all_pc_list, paste0("PC",i))
}
lm_fits <- data.frame()
## First time no PCs
for (gene in genes_in_prdx){
if (gene %in% genes_in_RNAseq){
fit <- lm(as.formula(paste0("tumor_expression[[gene]] ~ prdx_expression[[gene]] + ",all_pc_list)))
estimate <- coef(summary(fit))[2,1]
pvalue <- summary(fit)$coefficients[2,4]
Rsquared <- summary(fit)$r.squared
lm_fits <- rbind(lm_fits, data.frame(gene, estimate, Rsquared, pvalue))
}
}
adj_pvalue <- p.adjust(lm_fits$pvalue, method = "BH")
lm_fits <- cbind(lm_fits, adj_pvalue)
write.table(lm_fits, file = "BRCA_Normal_linearModel_8C_03142016.txt", col.names = TRUE, row.names = FALSE, quote = FALSE)
beep(3)
normal_pc <- read.table("BRCA_Normal_linearModel_8C_03142016.txt", header = TRUE, stringsAsFactors = FALSE)
head(normal_pc)
normal_pc <- read.table("BRCA_Normal_linearModel_8C_03142016.txt", header = TRUE, stringsAsFactors = FALSE)
norm_sigP <- filter(normal_pc, estimated < 0.05)
tumor_pc <- read.table("BRCA_Tumor_linearModel_150PC_03142016.txt", header = TRUE, stringsAsFactors = FALSE)
tum_sigP <- filter(tumor_pc, estimate < 0.05)
norm_sigP <- filter(normal_pc, estimate < 0.05)
tum_sigP <- filter(tumor_pc, estimate < 0.05)
norm_sigP <- filter(normal_pc, adj_pvalue < 0.05)
tum_sigP <- filter(tumor_pc, adj_pvalue < 0.05)
# Make individual data frames
norm_est <- data.frame(group = "normal", value = norm_sigP$estimate)
tum_est <- data.frame(group = "tumor", value =  tum_sigP$estimate)
# Combine into one long data frame
plot.data <- rbind(norm_est, tum_est)
bp <- ggplot(plot.data, aes(x=group, y=value, fill=group)) + geom_boxplot()
bp
bp + ylim(-10,200)
# Make individual data frames
norm_est <- data.frame(group = "normal", estimate = norm_sigP$estimate)
tum_est <- data.frame(group = "tumor", estimate =  tum_sigP$estimate)
# Combine into one long data frame
plot.data <- rbind(norm_est, tum_est)
bp <- ggplot(plot.data, aes(x=group, y=estimate, fill=group)) + geom_boxplot()
bp + ylim(-10,200)
wilcox.test(norm_est$estimate, tum_est$estimate, paired=FALSE)
bp
bp + y lim(-100, 500)
bp + ylim(-100, 500)
bp + ylim(-100, 1000)
bp + ylim(-200, 1000)
mean(norm_sigP$estimate)
mean(tum_sigP$estimate)
all_pc_list
setwd("~/ECEV-final-project-master")
source("All_timepts_vehremoved.R")
together_timepoints("Data.csv")
together_timepoints("Data.csv", "Template_1V4.csv", "Title", "new.txt")
source("All_timepts_vehremoved.R")
together_timepoints("Data.csv", "Template_1V4.csv", "Title", "new.txt")
together_timepoints("Data.csv", "Template_1V4.csv", "Title", "new")
setwd("~/GitHub/Final-project-coding")
together_timepoints("Data.csv", "Template.csv", "Title", "new")
print(graph)
together_timepoints("Data.csv", "Template.csv", "Title", "new")
source("All_timepts_vehremoved.R")
together_timepoints("Data.csv", "Template.csv", "Title", "new")
setwd("~/")
setwd("~/Patnaik/Patnaik")
setwd("~/Patnaik/Patnaik/")
selection_method <- "polyA" # or "hybrid"
RNAseq_exp <- read.table("dv_prostate_RNAseq_exp.csv", sep = ',', header = TRUE)
RNAseq_exp <- read.table("../dv_RNAseq_data_exp.csv", sep = ',', header = TRUE)
library(ConsensusClusterPlus)
library(gplots)
library(LPE)
install.packages("LPE")
mets_uqn <- quartile.normalize(mets_new, percent = 75)
source("https://bioconductor.org/biocLite.R")
biocLite("LPE")
library(LPE)
library(plyr)
library(dplyr)
library(RColorBrewer)
Sys.Date()
paste0("hi",Sys.Date(),".jpg")
if(exists("hc") == FALSE){
source("makeHC.R")
}
if(exists("hc") == FALSE){
source("R_files/makeHC.R")
}
install.packages("randomcoloR")
library(randomcoloR)
library(beepr)
cut_k <<- 500
cc_k <<- 13
coldClus <<- 6
hotClus <<- 3
cutree.cut <- function(K){
# K-Means Cluster Analysis
set.seed(42)
cluster_map <- cutree(hc, k = K)
return(cluster_map)
}
tcellCusters.pick <- function(k, cluster_map){
sig_gene_list <<- c('CD8A', 'CCL2', 'CCL3', 'CCL4', 'CXCL9',
'CXCL10', 'ICOS', 'GZMK', 'IRF1')
#                      'HLA-DMA', 'HLA-DOA', 'HLA-DOB', "HLA-DMB")
tcell_clusters <- list()
for (gene in sig_gene_list){
if (gene %in% names(cluster_map)){
tcell_clusters <- c(tcell_clusters, cluster_map[gene])
}
}
uniq_clusters <- unique(tcell_clusters)
myclusters <- data.frame()
for (cluster in uniq_clusters){
myclusters <- rbind(myclusters, d[cluster_map == cluster,])
}
return(myclusters)
}
genCC <- function(k,myclusters){
folder <<- paste0("k",k,"_",
format(Sys.time(),"%m-%e-%y_%H%M"))
results = ConsensusClusterPlus(as.matrix(myclusters),
maxK = 20, reps = 2000,
pItem = 0.8,
pFeature = 1,
title = folder,
clusterAlg = "hc",
distance = 'pearson',
seed=1262118388.71279,
plot="pdf",
verbose = FALSE)
return(results)
}
plotCC <- function(k_init, results, myclusters, cluster_map){
n = k_init
rand_colors <- distinctColorPalette(n)
more_colors <- list()
for (color in rand_colors){
more_colors <- c(more_colors, color)
}
cluster_assignment <- character()
for (g in sig_gene_list){
print(paste0(g,": ",cluster_map[g]))
cluster_assignment <- c(cluster_assignment, paste0(g,": ",cluster_map[g]))
}
for (num in c(cc_k)){
numClusters <- num
# Cluster different samples fall into
cOrder <- as.data.frame(results[[numClusters]]["consensusClass"])
cOrder$heatScore <- NA
cOrder$sampleMed <- NA
t_myclusters <- as.data.frame(t(myclusters))
#merge by row names
c_cluster <- merge(cOrder, t_myclusters, by = 0)
rownames(c_cluster) <- c_cluster$Row.names #add sampleID as row name
for (cclus in 1:num){
median_sig <- median(as.matrix(c_cluster[c_cluster$consensusClass == cclus,5:ncol(c_cluster)]))
c_cluster$heatScore[c_cluster$consensusClass == cclus] <- median_sig
}
for (SRR in rownames(c_cluster)){
median_row <- median(as.matrix(c_cluster[SRR,5:ncol(c_cluster)]))
c_cluster[SRR,"sampleMed"] <- median_row
}
#sort by cluster and transpose
heatOrder <- rank(c_cluster$heatScore, ties.method = "max")
ranks <- sort(unique(c_cluster$heatScore))
for (pos in 1:num){
c_cluster$heatOrder[c_cluster$heatScore == ranks[pos]] <- pos
}
c_cluster <-arrange(c_cluster, heatScore, sampleMed)
rownames(c_cluster) <- c_cluster$Row.names
new_cluster <- t(c_cluster[,4:ncol(c_cluster)]) #remove class and sampleID
#browser()
coldSRRs <<- rownames(subset(c_cluster, heatOrder <= coldClus))
hotSRRs <<- rownames(subset(c_cluster, heatOrder > (numClusters - hotClus)))
my_colors <- colorspace::diverge_hsv(numClusters)
# Add side bar colors
color.map<-function(CATEGORY) {my_colors[CATEGORY]}
sidebarcolors <- unlist(lapply(c_cluster$heatOrder, color.map))
secondColor.map <- function(CATEGORY) {more_colors[[CATEGORY]]}
allColors <- unlist(lapply(cluster_map, secondColor.map))
rowcolors <- allColors[rownames(new_cluster)]
my.breaks <- c(seq(-4, -.51, length.out=60),seq(-.50, .5, length.out=30),seq(.51,4, length.out=60))
filename = paste0(folder,"/metsK",k_init,"_k",numClusters,"_",format(Sys.time(), "%m-%e-%y_%H%M"),".tiff")
tiff(filename, width = 6, height = 8, units = 'in', res = 300, compression = 'none')
heatmap.2(as.matrix(new_cluster),
Rowv = TRUE,
Colv = NA,
dendrogram = "none",
trace = "none",
col = bluered(149),
main = paste0("Mets w/ outl:",k_init," CC k=",numClusters,"#: ",numGENES),
ColSideColors = sidebarcolors,
RowSideColors = rowcolors,
breaks = my.breaks,
density.info = "none",
labRow = "",
cexCol = 0.7
#labCol = ""
)
legend("topright",
legend = match(unique(rowcolors),more_colors),
col = unique(rowcolors),
lty= 1,
lwd = 5,
cex=.7
)
legend("top",
legend = cluster_assignment,
cex = .6
)
dev.off()
}
########################################
#######################################
}
for (k_num in c(cut_k)){
print(paste0("k = ",k_num))
CLUS_MAP <- cutree.cut(K = k_num)
MY_CLUS <- tcellCusters.pick(k = k_num, cluster_map = CLUS_MAP)
numGENES <<- dim(MY_CLUS)[1]
print(paste0("Number of genes: ",numGENES))
RESULTS <- genCC(k = k_num, myclusters = MY_CLUS)
plotCC(k_init = k_num, results = RESULTS, myclusters = MY_CLUS, cluster_map = CLUS_MAP)
}
source('~/Documents/fessler/prostate_bioinformatics/hotCold_CNVmutAnalysis_826.R')
library(ggplot2)
library(grid)
library(plyr)
library(dplyr)
source('../hotCold_CNVmutAnalysis_826.R')
source('R_files//hotCold_CNVmutAnalysis_826.R')
source('R_files/hotCold_CNVmutAnalysis_826.R')
PIK3CA_CN_upperLim <- 8
id_tab <- read.table("ID_key.csv", header = TRUE, stringsAsFactors = FALSE,
sep = ",")#row.names = "SRR_ID")
hotSamples <- id_tab[id_tab$SRR_ID %in% hotSRRs,]
rownames(hotSamples) <- hotSamples$sample_ID
hotSamples$SRR_ID = NULL
hotSamples$sample_ID = NULL
hotSamples$temp <- "HOT"
numHot <- dim(hotSamples)[1]
coldSamples <- id_tab[id_tab$SRR_ID %in% coldSRRs,]
rownames(coldSamples) <- coldSamples$sample_ID
coldSamples$SRR_ID = NULL
coldSamples$sample_ID = NULL
coldSamples$temp <- "COLD"
numCold <- dim(coldSamples)[1]
allSamples <- rbind(hotSamples, coldSamples)
mut_table <- read.table("ptenPIK3_mut.csv", sep = ",", header = TRUE,
stringsAsFactors = FALSE, row.names = "COMMON")
colnames(mut_table) <- paste0("mut_",colnames(mut_table))
cn_table <- read.table("ptenPIK3_absCN.csv", sep = ",", header = TRUE,
stringsAsFactors = FALSE, row.names = "COMMON")
colnames(cn_table) <- paste0("cn_",colnames(cn_table))
cn_table$cn_PTEN <- ifelse(cn_table$cn_PTEN < 0.4, 1, 0)
cn_table$cn_PIK3CA <- ifelse(cn_table$cn_PIK3CA > PIK3CA_CN_upperLim, 1, 0)
cn_table <- merge(allSamples, cn_table, by = 0)
rownames(cn_table) <- cn_table$Row.names
cn_table <- cn_table[,c("temp","cn_PTEN","cn_PIK3CA")]
#browser()
allData <- transform(merge(cn_table, mut_table, by = 0), row.names=Row.names, Row.names=NULL)
freqTable <- count(allData,vars = colnames(allData))
for (col in colnames(freqTable[2:(ncol(freqTable)-2)])){
if (sum(freqTable[[col]]) == 0){freqTable[[col]] <- NULL}
}
allData <- transform(merge(cn_table, mut_table, by = 0), row.names=Row.names, Row.names=NULL)
freqTable <- count(allData,vars = colnames(allData))
library(plyr)
freqTable <- count(allData,vars = colnames(allData))
library(dplyr)
freqTable <- count(allData,vars = colnames(allData))
freqT
freqTable <- count(allData,vars = colnames(allData))
freqTable <- count_(allData,vars = colnames(allData))
freqR
freqTable
for (col in colnames(freqTable[2:(ncol(freqTable)-2)])){
if (sum(freqTable[[col]]) == 0){freqTable[[col]] <- NULL}
}
freqTable$Name <- NA
for (row in 1:nrow(freqTable)){
rowdf <- freqTable[row,2:(ncol(freqTable)-2)]
name <- paste(colnames(rowdf[which(!rowdf == 0)]),collapse = "+")
freqTable[row,"Name"] <- name
}
freqTable <- freqTable[freqTable$Name!="",]
resultsList <- list()
statusList <- colnames(freqTable)[2:(ncol(freqTable)-2)]
for (status in statusList){
countTab <- dplyr::summarise(group_by(freqTable[freqTable[[status]]==1,], temp),
changed = sum(freq) )
if (dim(countTab)[1] == 2) { # HOT and COLD
countTab <- as.data.frame(mutate(countTab,
total = c(numCold, numHot),
unchanged = (total - changed)))
}
if (dim(countTab)[1] == 1){ # HOT or COLD ONLY
if (countTab$temp == "HOT"){
countTab <- rbind(as.data.frame(countTab), data.frame(temp = "COLD", changed = 0))
countTab <- mutate(countTab,
total = c(numHot, numCold),
unchanged = (total - changed))
}
else {
countTab <- rbind(as.data.frame(countTab), data.frame(temp = "HOT", changed = 0))
countTab <- mutate(countTab,
total = c(numCold, numHot),
unchanged = (total - changed))
}
}
rownames(countTab) <- countTab$temp
countTab$temp <- NULL
countTab$total <- NULL
ftest <- fisher.test(countTab)
resultsList <- c(resultsList, paste0(status,": ",round(ftest$p.value,3)))
print(paste0(status,": ",round(ftest$p.value,3)))
print(countTab)
}
for (row in 1:nrow(freqTable)){
if (freqTable[row,"temp"] == "COLD"){
freqTable[row, "percent"] <- (freqTable[row, "freq"])/numCold
freqTable[row, "total"] <- numCold
}
if (freqTable[row,"temp"] == "HOT"){
freqTable[row, "percent"] <- (freqTable[row, "freq"])/numHot
freqTable[row, "total"] <- numHot
}
}
####
source('~/Patnaik/Patnaik/R_files/hotCold_CNVmutAnalysis_826.R')
rm(list=setdiff(ls(), "hm"))
hc <- as.hclust(hm$rowDendrogram)
source('~/Patnaik/Patnaik/R_files/exploreHotCold.R')
source('~/Patnaik/Patnaik/R_files/exploreHotCold.R')
source('~/Patnaik/Patnaik/R_files/hotCold_CNVmutAnalysis_826.R')
freqTable <- plyr::count(allData,vars = colnames(allData))
freqTable
source('~/Patnaik/Patnaik/R_files/hotCold_CNVmutAnalysis_826.R')
p
jpeg(TITLE)
TITLE <- paste0("K=",cut_k,", cc=",cc_k,", cold:",coldClus," hot:",hotClus,"\n",
"# Cold = ",numCold," # Hot = ",numHot)
jpeg(TITLE)
jpeg(paste0("K",cut_k,"_cc",cc_k,"_Cold",coldClus,"-Hot"))
p
dev.off()
Sys.time()
jpeg(paste0(folder,cut_k,"_cc",cc_k,"_Cold",coldClus,"-Hot",hotClus,".jpg"))
p
dev.off()
folder
paste0(folder,cut_k,"_cc",cc_k,"_Cold",coldClus,"-Hot",hotClus,".jpg")
jpeg(paste0(folder,"/",cut_k,"_cc",cc_k,"_Cold",coldClus,"-Hot",hotClus,".jpg"))
p
folder <<- paste0("resultImages/k",k,"_",
format(Sys.time(),"%m-%e-%y_%H%M"))
source('~/Patnaik/Patnaik/R_files/exploreHotCold.R')
source('R_files/hotCold_CNVmutAnalysis_826.R')
source('~/Patnaik/Patnaik/R_files/hotCold_CNVmutAnalysis_826.R')
p
jpeg(paste0(folder,"/",cut_k,"_cc",cc_k,"_Cold",coldClus,"-Hot",hotClus,".jpg"))
p
dev.off()
resultsList
pdf("results.pdf")
resultsList
dev.off()
class(resultsList)
sink(file = 'results.txt')
resultsList
sink()
sink(file = 'results.txt')
print(resultsList)
sink()
source('~/Patnaik/Patnaik/R_files/exploreHotCold.R')
p
jpeg(paste0(folder,"/",cut_k,"_cc",cc_k,"_Cold",coldClus,"-Hot",hotClus,".jpg"))
plot(p)
dev.off()
source('~/Patnaik/Patnaik/R_files/tumorSitePlot.R')
source('~/Patnaik/Patnaik/R_files/tumorSitePlot.R')
tumorSite <- read.table("tumorSite.csv", sep = ",", header = T, row.names = "Patient.ID")
hotTumors <- merge(hotSamples, tumorSite, by = 0)
hotTumors$temp <- "HOT"
numHot <- nrow(hotTumors)
coldTumors <- merge(coldSamples, tumorSite, by = 0)
coldTumors$temp <- "COLD"
numCold <- nrow(coldTumors)
allTumors <- transform(rbind(hotTumors, coldTumors), row.names = Row.names, Row.names = NULL)
tumorFreq <- plyr::count(allTumors)
for (row in 1:nrow(tumorFreq)){
if (tumorFreq[row,"temp"] == "COLD"){
tumorFreq[row, "percent"] <- (tumorFreq[row, "freq"])/numCold
}
if (tumorFreq[row,"temp"] == "HOT"){
tumorFreq[row, "percent"] <- (tumorFreq[row, "freq"])/numHot
}
}
tumorFreq = ddply(tumorFreq, .(temp), transform, pos = (cumsum(percent) - 0.5 * percent))
tumorFreq$label = paste0(round(tumorFreq$percent*100), "%")
newp <- ggplot(tumorFreq, aes(factor(temp), y = percent, fill = Tumor.Site)) +
geom_bar(stat = "identity") + scale_y_continuous() +
ggtitle(paste0("# Cold = ",numCold," # Hot = ",numHot))
newp <- newp + geom_text( aes(x = temp, y = pos, label = label), size = 4)
newp <- newp + geom_text( aes(x = temp, y = pos + .03, label = freq), size = 2)
newp
newp <- newp + geom_text( aes(x = temp, y = pos + .03, label = freq), size = 3)
newp
newp <- ggplot(tumorFreq, aes(factor(temp), y = percent, fill = Tumor.Site)) +
geom_bar(stat = "identity") + scale_y_continuous() +
ggtitle(paste0("# Cold = ",numCold," # Hot = ",numHot))
newp <- newp + geom_text( aes(x = temp, y = pos, label = label), size = 4)
newp <- newp + geom_text( aes(x = temp, y = pos + .03, label = freq), size = 3)
newp
newp <- ggplot(tumorFreq, aes(factor(temp), y = percent, fill = Tumor.Site)) +
geom_bar(stat = "identity") + scale_y_continuous() +
ggtitle(paste0("Metastatic Site: # Cold = ",numCold," # Hot = ",numHot))
newp <- newp + geom_text( aes(x = temp, y = pos, label = label), size = 4)
newp <- newp + geom_text( aes(x = temp, y = pos + .03, label = freq), size = 3)
jpeg(paste0(folder,"/metastaticSites.jpg"))
plot(newp)
dev.off()
source('~/Patnaik/Patnaik/R_files/exploreHotCold.R')
source("R_files/tumorSite.R")
source("R_files/tumorSitePlot.R")
tumorSite <- read.table("tumorSite.csv", sep = ",", header = T, row.names = "Patient.ID")
source('R_files/tumorSitePlot.R')
